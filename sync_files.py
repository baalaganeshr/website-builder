import subprocess
import os

files_to_sync = [
    ".devconfig.yml",
    ".env.example",
    ".gitattributes",
    ".github/FUNDING.yml",
    ".github/ISSUE_TEMPLATE/bug_report.md",
    ".github/ISSUE_TEMPLATE/custom.md",
    ".github/ISSUE_TEMPLATE/feature_request.md",
    ".gitignore",
    ".vscode/settings.json",
    "GETTING_STARTED.md",
    "INTEGRATION_COMPLETE.md",
    "LICENSE",
    "README.md",
    "SETUP_SUCCESS.md",
    "backend/.gitignore",
    "backend/.pre-commit-config.yaml",
    "backend/Dockerfile",
    "backend/README.md",
    "backend/codegen/__init__.py",
    "backend/codegen/test_utils.py",
    "backend/codegen/utils.py",
    "backend/config.py",
    "backend/custom_types.py",
    "backend/debug/DebugFileWriter.py",
    "backend/debug/__init__.py",
    "backend/diagnose.py",
    "backend/evals/__init__.py",
    "backend/evals/config.py",
    "backend/evals/core.py",
    "backend/evals/runner.py",
    "backend/evals/utils.py",
    "backend/fs_logging/__init__.py",
    "backend/fs_logging/core.py",
    "backend/image_generation/__init__.py",
    "backend/image_generation/core.py",
    "backend/image_generation/replicate.py",
    "backend/image_processing/__init__.py",
    "backend/image_processing/utils.py",
    "backend/llm_simple.py",
    "backend/main.py",
    "backend/main_simple.py",
    "backend/mock_llm.py",
    "backend/models/__init__.py",
    "backend/models/claude.py",
    "backend/models/gemini.py",
    "backend/models/ollama_client.py",
    "backend/poetry.lock",
    "backend/prompts/__init__.py",
    "backend/prompts/claude_prompts.py",
    "backend/prompts/imported_code_prompts.py",
    "backend/prompts/screenshot_system_prompts.py",
    "backend/prompts/text_prompts.py",
    "backend/prompts/types.py",
    "backend/prompts/website_prompts.py",
    "backend/pyproject.toml",
    "backend/pyrightconfig.json",
    "backend/pytest.ini",
    "backend/routes/ollama_api.py",
    "backend/run_evals.py",
    "backend/run_image_generation_evals.py",
    "backend/services/__init__.py",
    "backend/services/prompt_manager.py",
    "backend/simple_test.py",
    "backend/start.py",
    "backend/test_integration.py",
    "backend/tests/__init__.py",
    "backend/tests/test_model_selection.py",
    "backend/tests/test_prompt_summary.py",
    "backend/tests/test_prompts.py",
    "backend/tests/test_prompts_additional.py",
    "backend/tests/test_screenshot.py",
    "backend/utils.py",
    "backend/video/utils.py",
    "backend/video_to_app.py",
    "backend/ws/__init__.py",
    "backend/ws/constants.py",
    "check_status.bat",
    "docker-compose.yml",
    "docs/CLAUDE.md",
    "docs/Evaluation.md",
    "docs/GETTING_STARTED.md",
    "docs/INDEX.md",
    "docs/INTEGRATION_COMPLETE.md",
    "docs/OLD_README.md",
    "docs/SETUP_SUCCESS.md",
    "docs/TESTING.md",
    "docs/Troubleshooting.md",
    "docs/plan.md",
    "fix_issues.bat",
    "frontend/.eslintrc.cjs",
    "frontend/.gitignore",
    "frontend/Dockerfile",
    "frontend/components.json",
    "frontend/index.html",
    "frontend/jest.config.js",
    "frontend/package.json",
    "frontend/postcss.config.js",
    "frontend/public/brand/twitter-summary-card.png",
    "frontend/public/favicon/coding.png",
    "frontend/public/favicon/main.png",
    "frontend/src/App.tsx",
    "frontend/src/config.ts",
    "frontend/src/index.css",
    "frontend/src/lib/models.ts",
    "frontend/src/lib/takeScreenshot.ts",
    "frontend/src/lib/utils.ts",
    "frontend/src/main.tsx",
    "frontend/src/setupTests.ts",
    "frontend/src/tests/fixtures/simple_button.png",
    "frontend/src/tests/fixtures/simple_ui_with_image.png",
    "frontend/src/tests/qa.test.ts",
    "frontend/src/urls.ts",
    "frontend/src/vite-env.d.ts",
    "frontend/tailwind.config.js",
    "frontend/tsconfig.json",
    "frontend/tsconfig.node.json",
    "frontend/vite.config.ts",
    "frontend/yarn.lock",
    "package-lock.json",
    "package.json",
    "quick_test.py",
    "scripts/check_status.bat",
    "scripts/fix_issues.bat",
    "scripts/setup.bat",
    "scripts/setup.ps1",
    "scripts/setup.sh",
    "scripts/setup_fixed.ps1",
    "scripts/setup_new.ps1",
    "scripts/start.bat",
    "scripts/start_ollama_only.bat",
    "setup.bat",
    "setup.ps1",
    "setup.sh",
    "setup_fixed.ps1",
    "setup_new.ps1",
    "show_config.py",
    "simple_backend_test.py",
    "start.bat",
    "start_ollama_only.bat",
    "test_ollama.py",
    "test_ollama_raw.py",
    "tools/blog/evaluating-claude.md",
    "tools/design-docs/commits-and-variants.md",
    "tools/design-docs/general.md",
    "tools/design-docs/images-in-update-history.md",
    "tools/design-docs/todo-list.md",
    "tools/design-docs/variant-system.md",
    "tools/quick_test.py",
    "tools/show_config.py",
    "tools/simple_backend_test.py",
    "tools/test_ollama.py",
    "yarn.lock"
]

def sync_files():
    for filepath in files_to_sync:
        try:
            # Ensure the directory exists
            dir_name = os.path.dirname(filepath)
            if dir_name:
                os.makedirs(dir_name, exist_ok=True)

            # Get the content of the file from git
            content = subprocess.check_output(
                ['git', 'show', f'origin/feature/local-ollama-conversion:{filepath}'],
                text=True,
                errors='ignore'  # Ignore errors for binary files
            )

            # Write the content to the file
            with open(filepath, 'w', encoding='utf-8', errors='ignore') as f:
                f.write(content)

            print(f"Synced: {filepath}")

        except subprocess.CalledProcessError as e:
            print(f"Error syncing {filepath}: {e}")
        except Exception as e:
            print(f"An unexpected error occurred with {filepath}: {e}")

if __name__ == "__main__":
    sync_files()
